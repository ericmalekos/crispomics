#!/usr/bin/env python3

import argparse
import gffutils
from pybedtools import BedTool
from collections import defaultdict

def create_db(input_file, db_file, is_gtf):
    gffutils.create_db(input_file, db_file, disable_infer_genes=True, disable_infer_transcripts=True, merge_strategy='merge', force=True, keep_order=True, sort_attribute_values=True)

def get_constitutive_exons(db):
    const_exons = defaultdict(list)
    for gene in db.features_of_type('gene'):
        gene_exons = defaultdict(list)
        for trans in db.children(gene, featuretype='transcript'):
            for ex in db.children(trans, featuretype='exon'):
                gene_exons[(ex.start, ex.end)].append(ex)
        const_exons[gene] = [ex[0] for ex in gene_exons.values() if len(ex) == len(gene_exons)]
    return const_exons
   
def merge_features(features):
    bed = BedTool('\n'.join(str(f) for f in features), from_string=True)
    merged = bed.sort().merge()
    return [gffutils.Feature(f) for f in merged]

def create_new_models(input_file, output_file, is_gtf=False, constitutive=False):
    db_file = input_file + '.db'
    create_db(input_file, db_file, is_gtf)
    db = gffutils.FeatureDB(db_file)

    with open(output_file, 'w') as out:
        for gene in db.features_of_type('gene'):
            exons = [ex for ex in db.children(gene, featuretype='exon')]
            cds = [c for c in db.children(gene, featuretype='CDS')]

            if constitutive:
                const_exons = get_constitutive_exons(db)[gene]
                exons = [ex for ex in exons if ex in const_exons]
                cds = [c for c in cds if c in const_exons]

            if not exons and not cds:
                continue

            exons = merge_features(exons)
            cds = merge_features(cds)

            # update gene coordinates
            start = min([f.start for f in exons+cds if f.start is not None])
            end = max([f.end for f in exons+cds if f.end is not None])
            gene.start = start
            gene.end = end
            out.write(str(gene) + '\n')

            # write new transcript
            transcript = gffutils.Feature(seqid=gene.seqid, source=gene.source, featuretype='transcript', start=start, end=end, strand=gene.strand, attributes={'ID': [gene.id + '.t1'], 'Parent': [gene.id]})
            out.write(str(transcript) + '\n')

            # write exons and CDS
            for features, featuretype in [(exons, 'exon'), (cds, 'CDS')]:
                for i, feature in enumerate(features, start=1):
                    feature.featuretype = featuretype
                    feature.attributes = {'ID': [gene.id + '.' + featuretype + str(i)], 'Parent': [transcript.id]}
                    out.write(str(feature) + '\n')

# if __name__ == "__main__":
#     parser = argparse.ArgumentParser(description='Create new gene models from GFF or GTF file')
#     parser.add_argument('input_file', type=str, help='Input GFF or GTF file')
#     parser.add_argument('output_file', type=str, help='Output file for new gene models')
#     parser.add_argument('--gtf', action='store_true', help='Use this flag if the input file is in GTF format')
#     parser.add_argument('--const', action='store_true', help='Use this flag to consider only constitutive exons')
#     args = parser.parse_args()

#     create_new_models(args.input_file, args.output_file, is_gtf=args.gtf, constitutive=args.const)

if __name__ == "__main__":
    create_new_models("SPI1.gff3", "output.gff3")
